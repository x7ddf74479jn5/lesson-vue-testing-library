// @testing-library/vueを使ってテストを書いていきます。

describe.todo("復習", () => {
  test("増やすボタンをクリックするとカウントが増加する");
  test("減らすボタンをクリックするとカウントが減少する");
  test("カウントが0の場合、減らすボタンは無効化される");
});

// 【練習用テストケース】複数回連続クリックのテスト
describe.todo("練習：複数回ボタンをクリックした場合の動作", () => {
  test("増やすボタンを3回クリックするとカウントが3になる", async () => {
    // userEvent.setup()：ユーザー操作のセットアップ
    // コンポーネントをレンダリング
    // 増やすボタンを取得
    // 3回連続でクリック
    // カウントが3になっていることを検証
  });

  test("増やすボタン5回→減らすボタン2回で最終的に3になる", async () => {
    // 5回増やす
    // 2回減らす
    // 最終的に3になることを検証
  });
});

// 【練習用テストケース】初期値のテスト
describe.todo("練習：初期値が設定されている場合の動作", () => {
  test("初期値10で開始し、増やすボタンをクリックすると11になる", async () => {
    // 初期値10でコンポーネントをレンダリング
    // 初期値が正しく表示されていることを確認
    // 増やすボタンをクリック
    // カウントが11になることを検証
  });

  test("初期値5で開始し、減らすボタンを2回クリックすると3になる", async () => {
    // 2回減らす
    // カウントが3になることを検証
  });
});

// 【練習用テストケース】カウンター表示形式のテスト
describe.todo("練習：カウンターの表示内容をテストする", () => {
  test("カウンターの表示が正しい形式（Count: 数値）になっている", () => {
    // getByText()で正確なテキストパターンを検証
    // 正規表現を使ってパターンマッチング
  });

  test("複数の値でカウンター表示形式をテスト", async () => {
    // 各段階でテキスト形式を検証
  });

  test("ボタンのテキストが正しく表示されている", () => {
    // ボタンのテキスト内容を検証
    // getByText()でも検証可能
  });
});
